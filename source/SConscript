#
# Copyright (C) 2009-2013 Alex Smith
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

Import('config', 'manager')

# Generate the configuration header. We don't generate with Kconfig because its
# too much of a pain to get SCons to do it properly.
f = open('config.h', 'w')
f.write('/* This file is automatically-generated, do not edit. */\n\n')
for (k, v) in config.items():
		if isinstance(v, str):
				f.write("#define CONFIG_%s \"%s\"\n" % (k, v))
		elif isinstance(v, bool) or isinstance(v, int):
				f.write("#define CONFIG_%s %d\n" % (k, int(v)))
		else:
				raise Exception, "Unsupported type %s in config" % (type(v))
f.close()

dist = manager['dist']

#################
# Kernel build. #
#################

# Build the kernel.
SConscript(dirs = ['kernel'])

################
# KBoot build. #
################

# Create the build environment for the bootloader.
env = manager.CreateBare(name = 'boot', flags = {
		'LIBS': [],
		'CCFLAGS': [ '-nostdlib', '-nostdinc', '-ffreestanding', '-fno-stack-protector'],
		'ASFLAGS': ['-nostdinc'],
		'LINKFLAGS': ['-nostdlib'],
})

# Override any optimisation level specified, we want to optimise for size.
env['CCFLAGS'] = filter(lambda f: f[0:2] != '-O', env['CCFLAGS']) + ['-Os']

# Add the compiler include directory for some standard headers.
from subprocess import Popen, PIPE
incdir = Popen([env['CC'], '-print-file-name=include'], stdout = PIPE).communicate()[0].strip()
env['CCFLAGS'] += ['-isystem', incdir]
env['ASFLAGS'] += ['-isystem', incdir]

# Build the bootloader.
defaults = []
SConscript(dirs = ['boot'], exports = ['env', 'defaults'])
for t in defaults:
		if t[0].name != 'loader':
				Depends(File('boot/loader'), t)

# Put stuff into the distribution environment.
dist['LOADER'] = File('boot/loader')
if config['PLATFORM'] == 'pc':
		dist['CDBOOT'] = File('boot/platform/pc/stage1/cdboot')

####################
# Userspace build. #
####################

# Build userspace.
SConscript(dirs = ['lib', 'bin'])

###############
# Image build #
###############

# Always build the filesystem image to make sure new stuff is copied into it.
fsimage = dist.FSImage('fsimage.tar', [])
AlwaysBuild(fsimage)

# Add aliases and set the default target.
Alias('loader', dist['LOADER'])
Alias('kernel', dist['KERNEL'])
Alias('modules', dist['MODULES'])
Alias('fsimage', fsimage)

# Add platform-specific targets to generate bootable images.
if config['PLATFORM'] == 'pc':
		Default(Alias('cdrom', dist.ISOImage('cdrom.iso', fsimage)))

		# Target to run in QEMU.
		Alias('qemu', dist.Command('__qemu', ['cdrom.iso'], Action(
				config['QEMU_BINARY'] + ' -cdrom $SOURCE -boot d ' + config['QEMU_OPTS'],
				None)))
else:
		Default(dist['KERNEL'])
		Default(dist['LOADER'])
