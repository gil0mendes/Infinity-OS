/*
 * Copyright (C) 2010 Alex Smith
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/**
 * @file
 * @brief		IA32 system call code generator.
 */

#include <boost/foreach.hpp>

#include "IA32Target.h"

using namespace std;

/** Add this target's types to the type map.
 * @param map		Map to add to. */
void IA32Target::AddTypes(TypeMap &map) {
	map["int"] = Type(1);
	map["uint"] = Type(1);
	map["char"] = Type(1);
	map["bool"] = Type(1);
	map["ptr_t"] = Type(1);
	map["size_t"] = Type(1);
	map["ssize_t"] = Type(1);
	map["int8_t"] = Type(1);
	map["int16_t"] = Type(1);
	map["int32_t"] = Type(1);
	map["int64_t"] = Type(2);
	map["uint8_t"] = Type(1);
	map["uint16_t"] = Type(1);
	map["uint32_t"] = Type(1);
	map["uint64_t"] = Type(2);
}

/** Generate a push instruction. */
#define GENERATE_PUSH(name)	pushed.push_front((name)); stream << "	push	" name << endl;

/** Generate the system call code.
 * @param stream	Stream to write output to.
 * @param calls		List of system calls. */
void IA32Target::Generate(std::ostream &stream, const SyscallList &calls) {
	stream << "/* This file is automatically generated. Do not edit! */" << endl;
	BOOST_FOREACH(const Syscall *call, calls) {
		string name = call->GetName();
		if(call->GetAttributes() & Syscall::kWrappedAttribute) {
			name = '_' + name;
		}

		/* Write the common code for all calls. */
		stream << endl;
		if(call->GetAttributes() & Syscall::kHiddenAttribute) {
			stream << ".hidden " << name << endl;
		}
		stream << ".global " << name << endl;
		stream << ".type " << name << ", @function" << endl;
		stream << name << ':' << endl;
		stream << "	movl	$" << call->GetID() << ", %eax" << endl;

		/* Now the difficult part - handling different numbers of
		 * arguments. We use callee-save registers for some things so
		 * must save them. Create a list of pushed registers so we can
		 * write out pops for them after without having to do a case
		 * for each number of arguments. The list is in the order to be
		 * popped in. If the call has more than 6 arguments, we do not
		 * do anything here: the kernel will copy all arguments from
		 * the stack. */
		list<string> pushed;
		switch(call->GetParameterCount()) {
		case 1:
			stream << "	movl	4(%esp), %edx" << endl;
			break;
		case 2:
			stream << "	movl	4(%esp), %edx" << endl;
			stream << "	movl	8(%esp), %ecx" << endl;
			break;
		case 3:
			GENERATE_PUSH("%edi");
			stream << "	movl	8(%esp), %edx" << endl;
			stream << "	movl	12(%esp), %ecx" << endl;
			stream << "	movl	16(%esp), %edi" << endl;
			break;
		case 4:
			GENERATE_PUSH("%edi");
			GENERATE_PUSH("%esi");
			stream << "	movl	12(%esp), %edx" << endl;
			stream << "	movl	16(%esp), %ecx" << endl;
			stream << "	movl	20(%esp), %edi" << endl;
			stream << "	movl	24(%esp), %esi" << endl;
			break;
		case 5:
			GENERATE_PUSH("%edi");
			GENERATE_PUSH("%esi");
			GENERATE_PUSH("%ebx");
			stream << "	movl	16(%esp), %edx" << endl;
			stream << "	movl	20(%esp), %ecx" << endl;
			stream << "	movl	24(%esp), %edi" << endl;
			stream << "	movl	28(%esp), %esi" << endl;
			stream << "	movl	32(%esp), %ebx" << endl;
			break;
		case 6:
			GENERATE_PUSH("%edi");
			GENERATE_PUSH("%esi");
			GENERATE_PUSH("%ebx");
			GENERATE_PUSH("%ebp");
			stream << "	movl	20(%esp), %edx" << endl;
			stream << "	movl	24(%esp), %ecx" << endl;
			stream << "	movl	28(%esp), %edi" << endl;
			stream << "	movl	32(%esp), %esi" << endl;
			stream << "	movl	36(%esp), %ebx" << endl;
			stream << "	movl	40(%esp), %ebp" << endl;
			break;
		}

		/* Perform the call, pop pushed registers and return. */
		stream << "	int	$0x80" << endl;
		BOOST_FOREACH(const std::string &str, pushed) {
			stream << "	pop	" << str << endl;
		}
		stream << "	ret" << endl;
		stream << ".size " << name << ", .-" << name << endl;
	}
}
