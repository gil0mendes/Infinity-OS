diff -urN llvm-3.3.src.orig/include/llvm/ADT/Triple.h llvm-3.3.src/include/llvm/ADT/Triple.h
--- llvm-3.3.src.orig/include/llvm/ADT/Triple.h	2013-08-11 18:40:43.000000000 +0100
+++ llvm-3.3.src/include/llvm/ADT/Triple.h	2013-08-11 21:00:17.000000000 +0100
@@ -105,7 +105,8 @@
     NaCl,       // Native Client
     CNK,        // BG/P Compute-Node Kernel
     Bitrig,
-    AIX
+    AIX,
+    Pulsar
   };
   enum EnvironmentType {
     UnknownEnvironment,
diff -urN llvm-3.3.src.orig/lib/Support/Triple.cpp llvm-3.3.src/lib/Support/Triple.cpp
--- llvm-3.3.src.orig/lib/Support/Triple.cpp	2013-08-11 18:40:43.000000000 +0100
+++ llvm-3.3.src/lib/Support/Triple.cpp	2013-08-11 21:00:17.000000000 +0100
@@ -135,6 +135,7 @@
   case CNK: return "cnk";
   case Bitrig: return "bitrig";
   case AIX: return "aix";
+  case Pulsar: return "pulsar";
   }
 
   llvm_unreachable("Invalid OSType");
@@ -287,6 +288,7 @@
     .StartsWith("cnk", Triple::CNK)
     .StartsWith("bitrig", Triple::Bitrig)
     .StartsWith("aix", Triple::AIX)
+    .StartsWith("pulsar", Triple::Pulsar)
     .Default(Triple::UnknownOS);
 }
 
diff -urN llvm-3.3.src.orig/tools/clang/lib/Basic/Targets.cpp llvm-3.3.src/tools/clang/lib/Basic/Targets.cpp
--- llvm-3.3.src.orig/tools/clang/lib/Basic/Targets.cpp	2013-08-11 18:40:46.000000000 +0100
+++ llvm-3.3.src/tools/clang/lib/Basic/Targets.cpp	2013-08-11 21:00:17.000000000 +0100
@@ -397,6 +397,23 @@
   }
 };
 
+// Pulsar Target
+template<typename Target>
+class PulsarTargetInfo : public OSTargetInfo<Target> {
+protected:
+  virtual void getOSDefines(const LangOptions &Opts, const llvm::Triple &Triple,
+                            MacroBuilder &Builder) const {
+    Builder.defineMacro("__Pulsar__");
+    Builder.defineMacro("__ELF__");
+    DefineStd(Builder, "unix", Opts);
+  }
+public:
+  PulsarTargetInfo(const std::string &triple)
+    : OSTargetInfo<Target>(triple) {
+      this->UserLabelPrefix = "";
+    }
+};
+
 // Bitrig Target
 template<typename Target>
 class BitrigTargetInfo : public OSTargetInfo<Target> {
@@ -5242,6 +5259,8 @@
       return new NetBSDTargetInfo<ARMTargetInfo>(T);
     case llvm::Triple::OpenBSD:
       return new OpenBSDTargetInfo<ARMTargetInfo>(T);
+    case llvm::Triple::Pulsar:
+      return new PulsarTargetInfo<ARMTargetInfo>(T);
     case llvm::Triple::Bitrig:
       return new BitrigTargetInfo<ARMTargetInfo>(T);
     case llvm::Triple::RTEMS:
@@ -5436,6 +5455,8 @@
       return new FreeBSDTargetInfo<X86_32TargetInfo>(T);
     case llvm::Triple::Minix:
       return new MinixTargetInfo<X86_32TargetInfo>(T);
+    case llvm::Triple::Pulsar:
+      return new PulsarTargetInfo<X86_32TargetInfo>(T);
     case llvm::Triple::Solaris:
       return new SolarisTargetInfo<X86_32TargetInfo>(T);
     case llvm::Triple::Cygwin:
@@ -5473,6 +5494,8 @@
       return new BitrigX86_64TargetInfo(T);
     case llvm::Triple::FreeBSD:
       return new FreeBSDTargetInfo<X86_64TargetInfo>(T);
+    case llvm::Triple::Pulsar:
+      return new PulsarTargetInfo<X86_64TargetInfo>(T);
     case llvm::Triple::Solaris:
       return new SolarisTargetInfo<X86_64TargetInfo>(T);
     case llvm::Triple::MinGW32:
diff -urN llvm-3.3.src.orig/tools/clang/lib/Driver/Driver.cpp llvm-3.3.src/tools/clang/lib/Driver/Driver.cpp
--- llvm-3.3.src.orig/tools/clang/lib/Driver/Driver.cpp	2013-08-11 18:40:46.000000000 +0100
+++ llvm-3.3.src/tools/clang/lib/Driver/Driver.cpp	2013-08-11 21:00:17.000000000 +0100
@@ -1747,6 +1747,9 @@
     case llvm::Triple::Minix:
       TC = new toolchains::Minix(*this, Target, Args);
       break;
+    case llvm::Triple::Pulsar:
+      TC = new toolchains::Pulsar(*this, Target, Args);
+      break;
     case llvm::Triple::Linux:
       if (Target.getArch() == llvm::Triple::hexagon)
         TC = new toolchains::Hexagon_TC(*this, Target, Args);
diff -urN llvm-3.3.src.orig/tools/clang/lib/Driver/ToolChains.cpp llvm-3.3.src/tools/clang/lib/Driver/ToolChains.cpp
--- llvm-3.3.src.orig/tools/clang/lib/Driver/ToolChains.cpp	2013-08-11 18:40:46.000000000 +0100
+++ llvm-3.3.src/tools/clang/lib/Driver/ToolChains.cpp	2013-08-11 22:02:49.000000000 +0100
@@ -1929,6 +1929,82 @@
   return new tools::minix::Link(*this);
 }
 
+/// Pulsar - Pulsar tool chain which can call as(1) and ld(1) directly.
+
+Pulsar::Pulsar(const Driver &D, const llvm::Triple& Triple, const ArgList &Args)
+  : Generic_ELF(D, Triple, Args) {
+  getFilePaths().push_back(getDriver().Dir + "/../lib");
+
+  // When using a sysroot, add '/lib' to allow '/system' to be omitted
+  // in the sysroot.
+  if(!getDriver().SysRoot.empty())
+    getFilePaths().push_back(getDriver().SysRoot + "/lib");
+  getFilePaths().push_back(getDriver().SysRoot + "/system/lib");
+}
+
+Tool *Pulsar::buildAssembler() const {
+  return new tools::pulsar::Assemble(*this);
+}
+
+Tool *Pulsar::buildLinker() const {
+  return new tools::pulsar::Link(*this);
+}
+
+void Pulsar::AddClangSystemIncludeArgs(const ArgList &DriverArgs,
+                                     ArgStringList &CC1Args) const {
+  const Driver &D = getDriver();
+
+  if (DriverArgs.hasArg(options::OPT_nostdinc))
+    return;
+
+  if (!DriverArgs.hasArg(options::OPT_nobuiltininc)) {
+    llvm::sys::Path P(D.ResourceDir);
+    P.appendComponent("include");
+    addSystemInclude(DriverArgs, CC1Args, P.str());
+  }
+
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc))
+    return;
+
+  if (!D.SysRoot.empty())
+    addSystemInclude(DriverArgs, CC1Args, D.SysRoot + "/include");
+  addSystemInclude(DriverArgs, CC1Args, D.SysRoot + "/system/include");
+}
+
+ToolChain::CXXStdlibType
+Pulsar::GetCXXStdlibType(const ArgList &Args) const {
+  if (Arg *A = Args.getLastArg(options::OPT_stdlib_EQ)) {
+    StringRef Value = A->getValue();
+    if (Value == "libc++")
+      return ToolChain::CST_Libcxx;
+
+    getDriver().Diag(diag::err_drv_invalid_stdlib_name)
+      << A->getAsString(Args);
+  }
+
+  return ToolChain::CST_Libcxx;
+}
+
+void Pulsar::AddClangCXXStdlibIncludeArgs(const ArgList &DriverArgs,
+                                        ArgStringList &CC1Args) const {
+  if (DriverArgs.hasArg(options::OPT_nostdlibinc) ||
+      DriverArgs.hasArg(options::OPT_nostdincxx))
+    return;
+
+  if (!getDriver().SysRoot.empty()) {
+    addSystemInclude(DriverArgs, CC1Args,
+                     getDriver().SysRoot + "/include/c++/v1");
+  }
+  addSystemInclude(DriverArgs, CC1Args,
+                   getDriver().SysRoot + "/system/include/c++/v1");
+}
+
+void Pulsar::AddCXXStdlibLibArgs(const ArgList &Args,
+                               ArgStringList &CmdArgs) const {
+  CmdArgs.push_back("-lc++");
+  CmdArgs.push_back("-lcxxrt");
+}
+
 /// AuroraUX - AuroraUX tool chain which can call as(1) and ld(1) directly.
 
 AuroraUX::AuroraUX(const Driver &D, const llvm::Triple& Triple,
diff -urN llvm-3.3.src.orig/tools/clang/lib/Driver/ToolChains.h llvm-3.3.src/tools/clang/lib/Driver/ToolChains.h
--- llvm-3.3.src.orig/tools/clang/lib/Driver/ToolChains.h	2013-08-11 18:40:46.000000000 +0100
+++ llvm-3.3.src/tools/clang/lib/Driver/ToolChains.h	2013-08-11 21:17:22.000000000 +0100
@@ -493,6 +493,25 @@
   virtual Tool *buildLinker() const;
 };
 
+class LLVM_LIBRARY_VISIBILITY Pulsar : public Generic_ELF {
+public:
+  Pulsar(const Driver &D, const llvm::Triple& Triple, const ArgList &Args);
+
+  virtual void AddClangSystemIncludeArgs(const ArgList &DriverArgs,
+                                         ArgStringList &CC1Args) const;
+
+  virtual CXXStdlibType GetCXXStdlibType(const ArgList &Args) const;
+
+  virtual void AddClangCXXStdlibIncludeArgs(const ArgList &DriverArgs,
+                                            ArgStringList &CC1Args) const;
+  virtual void AddCXXStdlibLibArgs(const ArgList &Args,
+                                   ArgStringList &CmdArgs) const;
+
+protected:
+  virtual Tool *buildAssembler() const;
+  virtual Tool *buildLinker() const;
+};
+
 class LLVM_LIBRARY_VISIBILITY DragonFly : public Generic_ELF {
 public:
   DragonFly(const Driver &D, const llvm::Triple& Triple, const ArgList &Args);
diff -urN llvm-3.3.src.orig/tools/clang/lib/Driver/Tools.cpp llvm-3.3.src/tools/clang/lib/Driver/Tools.cpp
--- llvm-3.3.src.orig/tools/clang/lib/Driver/Tools.cpp	2013-08-11 18:40:46.000000000 +0100
+++ llvm-3.3.src/tools/clang/lib/Driver/Tools.cpp	2013-08-11 21:43:54.000000000 +0100
@@ -1234,6 +1234,8 @@
 
   if (Triple.getOSName().startswith("haiku"))
     return "i586";
+  if (Triple.getOSName().startswith("pulsar"))
+    return "i686";
   if (Triple.getOSName().startswith("openbsd"))
     return "i486";
   if (Triple.getOSName().startswith("bitrig"))
@@ -6239,6 +6241,248 @@
   C.addCommand(new Command(JA, *this, Exec, CmdArgs));
 }
 
+void pulsar::Assemble::ConstructJob(Compilation &C, const JobAction &JA,
+                                  const InputInfo &Output,
+                                  const InputInfoList &Inputs,
+                                  const ArgList &Args,
+                                  const char *LinkingOutput) const {
+  ArgStringList CmdArgs;
+
+  // Add --32/--64 to make sure we get the format we want.
+  // This is incomplete
+  if (getToolChain().getArch() == llvm::Triple::x86) {
+    CmdArgs.push_back("--32");
+  } else if (getToolChain().getArch() == llvm::Triple::x86_64) {
+    CmdArgs.push_back("--64");
+  } else if (getToolChain().getArch() == llvm::Triple::ppc) {
+    CmdArgs.push_back("-a32");
+    CmdArgs.push_back("-mppc");
+    CmdArgs.push_back("-many");
+  } else if (getToolChain().getArch() == llvm::Triple::ppc64) {
+    CmdArgs.push_back("-a64");
+    CmdArgs.push_back("-mppc64");
+    CmdArgs.push_back("-many");
+  } else if (getToolChain().getArch() == llvm::Triple::arm) {
+    StringRef MArch = getToolChain().getArchName();
+    if (MArch == "armv7" || MArch == "armv7a" || MArch == "armv7-a")
+      CmdArgs.push_back("-mfpu=neon");
+
+    StringRef ARMFloatABI = getARMFloatABI(getToolChain().getDriver(), Args,
+                                           getToolChain().getTriple());
+    CmdArgs.push_back(Args.MakeArgString("-mfloat-abi=" + ARMFloatABI));
+
+    Args.AddLastArg(CmdArgs, options::OPT_march_EQ);
+    Args.AddLastArg(CmdArgs, options::OPT_mcpu_EQ);
+    Args.AddLastArg(CmdArgs, options::OPT_mfpu_EQ);
+  } else if (getToolChain().getArch() == llvm::Triple::mips ||
+             getToolChain().getArch() == llvm::Triple::mipsel ||
+             getToolChain().getArch() == llvm::Triple::mips64 ||
+             getToolChain().getArch() == llvm::Triple::mips64el) {
+    StringRef CPUName;
+    StringRef ABIName;
+    getMipsCPUAndABI(Args, getToolChain(), CPUName, ABIName);
+
+    CmdArgs.push_back("-march");
+    CmdArgs.push_back(CPUName.data());
+
+    // Convert ABI name to the GNU tools acceptable variant.
+    if (ABIName == "o32")
+      ABIName = "32";
+    else if (ABIName == "n64")
+      ABIName = "64";
+
+    CmdArgs.push_back("-mabi");
+    CmdArgs.push_back(ABIName.data());
+
+    if (getToolChain().getArch() == llvm::Triple::mips ||
+        getToolChain().getArch() == llvm::Triple::mips64)
+      CmdArgs.push_back("-EB");
+    else
+      CmdArgs.push_back("-EL");
+
+    Arg *LastPICArg = Args.getLastArg(options::OPT_fPIC, options::OPT_fno_PIC,
+                                      options::OPT_fpic, options::OPT_fno_pic,
+                                      options::OPT_fPIE, options::OPT_fno_PIE,
+                                      options::OPT_fpie, options::OPT_fno_pie);
+    if (LastPICArg &&
+        (LastPICArg->getOption().matches(options::OPT_fPIC) ||
+         LastPICArg->getOption().matches(options::OPT_fpic) ||
+         LastPICArg->getOption().matches(options::OPT_fPIE) ||
+         LastPICArg->getOption().matches(options::OPT_fpie))) {
+      CmdArgs.push_back("-KPIC");
+    }
+  }
+
+  Args.AddAllArgValues(CmdArgs, options::OPT_Wa_COMMA,
+                       options::OPT_Xassembler);
+
+  CmdArgs.push_back("-o");
+  CmdArgs.push_back(Output.getFilename());
+
+  for (InputInfoList::const_iterator
+         it = Inputs.begin(), ie = Inputs.end(); it != ie; ++it) {
+    const InputInfo &II = *it;
+    CmdArgs.push_back(II.getFilename());
+  }
+
+  const char *Exec =
+    Args.MakeArgString(getToolChain().GetProgramPath("as"));
+  C.addCommand(new Command(JA, *this, Exec, CmdArgs));
+}
+
+void pulsar::Link::ConstructJob(Compilation &C, const JobAction &JA,
+                              const InputInfo &Output,
+                              const InputInfoList &Inputs,
+                              const ArgList &Args,
+                              const char *LinkingOutput) const {
+  const Driver &D = getToolChain().getDriver();
+  ArgStringList CmdArgs;
+
+  // Silence warning for "clang -g foo.o -o foo"
+  Args.ClaimAllArgs(options::OPT_g_Group);
+  // and "clang -emit-llvm foo.o -o foo"
+  Args.ClaimAllArgs(options::OPT_emit_llvm);
+  // and for "clang -w foo.o -o foo". Other warning options are already
+  // handled somewhere else.
+  Args.ClaimAllArgs(options::OPT_w);
+
+  if (!D.SysRoot.empty())
+    CmdArgs.push_back(Args.MakeArgString("--sysroot=" + D.SysRoot));
+
+  if (Args.hasArg(options::OPT_pie))
+    CmdArgs.push_back("-pie");
+
+  if (Args.hasArg(options::OPT_rdynamic))
+    CmdArgs.push_back("-export-dynamic");
+
+  if (Args.hasArg(options::OPT_s))
+    CmdArgs.push_back("-s");
+
+  if (!Args.hasArg(options::OPT_static)) {
+    CmdArgs.push_back("--eh-frame-hdr");
+  }
+
+  // When building 32-bit code, we have to explicitly instruct ld in the base
+  // system to link 32-bit code.
+  if (getToolChain().getArch() == llvm::Triple::x86) {
+    CmdArgs.push_back("-m");
+    CmdArgs.push_back("elf_i386");
+  }
+
+  if (Args.hasArg(options::OPT_static)) {
+    if (getToolChain().getArch() == llvm::Triple::arm
+        || getToolChain().getArch() == llvm::Triple::thumb)
+      CmdArgs.push_back("-Bstatic");
+    else
+      CmdArgs.push_back("-static");
+  } else if (Args.hasArg(options::OPT_shared)) {
+    CmdArgs.push_back("-shared");
+  }
+
+  if (!Args.hasArg(options::OPT_static) &&
+      !Args.hasArg(options::OPT_shared)) {
+    CmdArgs.push_back("-dynamic-linker");
+    CmdArgs.push_back("/system/lib/libkernel.so");
+  }
+
+  switch(getToolChain().getArch()) {
+  case llvm::Triple::arm:
+  case llvm::Triple::x86:
+  case llvm::Triple::x86_64:
+    CmdArgs.push_back("--hash-style=both");
+    break;
+  default:
+    break;
+  }
+
+  if (Output.isFilename()) {
+    CmdArgs.push_back("-o");
+    CmdArgs.push_back(Output.getFilename());
+  } else {
+    assert(Output.isNothing() && "Invalid output.");
+  }
+
+  if (!Args.hasArg(options::OPT_nostdlib) &&
+      !Args.hasArg(options::OPT_nostartfiles)) {
+    if (!Args.hasArg(options::OPT_shared)) {
+      if (Args.hasArg(options::OPT_pie))
+        CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath("Scrt1.o")));
+      else
+        CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath("crt1.o")));
+    }
+
+    CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath("crti.o")));
+
+    if (Args.hasArg(options::OPT_static))
+      CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath("crtbeginT.o")));
+    else if (Args.hasArg(options::OPT_shared) || Args.hasArg(options::OPT_pie))
+      CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath("crtbeginS.o")));
+    else
+      CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath("crtbegin.o")));
+  }
+
+  Args.AddAllArgs(CmdArgs, options::OPT_L);
+
+  const ToolChain::path_list Paths = getToolChain().getFilePaths();
+  for (ToolChain::path_list::const_iterator i = Paths.begin(), e = Paths.end();
+       i != e; ++i)
+    CmdArgs.push_back(Args.MakeArgString(StringRef("-L") + *i));
+
+  // Tell the linker to load the plugin. This has to come before AddLinkerInputs
+  // as gold requires -plugin to come before any -plugin-opt that -Wl might
+  // forward.
+  if (D.IsUsingLTO(Args) || Args.hasArg(options::OPT_use_gold_plugin)) {
+    CmdArgs.push_back("-plugin");
+    std::string Plugin = getToolChain().getDriver().Dir + "/../lib/LLVMgold.so";
+    CmdArgs.push_back(Args.MakeArgString(Plugin));
+  }
+
+  AddLinkerInputs(getToolChain(), Inputs, Args, CmdArgs);
+
+  if (!Args.hasArg(options::OPT_nostdlib) &&
+      !Args.hasArg(options::OPT_nodefaultlibs)) {
+    if (D.CCCIsCXX) {
+      getToolChain().AddCXXStdlibLibArgs(Args, CmdArgs);
+      CmdArgs.push_back("-lm");
+    }
+    CmdArgs.push_back("-lsystem");
+
+    std::string file = "libclang_rt.";
+    const llvm::Triple &T = getToolChain().getTriple();
+    llvm::Triple::ArchType Arch = T.getArch();
+    switch (Arch) {
+      case llvm::Triple::arm:
+        file += "arm";
+        break;
+      case llvm::Triple::x86:
+        file += "i386";
+        break;
+      case llvm::Triple::x86_64:
+        file += "x86_64";
+        break;
+      default:
+        assert(0 && "Unsupported architecture");
+    }
+    file += ".a";
+
+    CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath(file.c_str())));
+  }
+
+  if (!Args.hasArg(options::OPT_nostdlib) &&
+      !Args.hasArg(options::OPT_nostartfiles)) {
+    if (!Args.hasArg(options::OPT_shared))
+      CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath("crtend.o")));
+    else
+      CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath("crtendS.o")));
+    CmdArgs.push_back(Args.MakeArgString(getToolChain().GetFilePath("crtn.o")));
+  }
+
+  addProfileRT(getToolChain(), Args, CmdArgs, getToolChain().getTriple());
+
+  const char *Exec = Args.MakeArgString(getToolChain().GetProgramPath("ld"));
+  C.addCommand(new Command(JA, *this, Exec, CmdArgs));
+}
+
 /// DragonFly Tools
 
 // For now, DragonFly Assemble does just about the same as for
diff -urN llvm-3.3.src.orig/tools/clang/lib/Driver/Tools.h llvm-3.3.src/tools/clang/lib/Driver/Tools.h
--- llvm-3.3.src.orig/tools/clang/lib/Driver/Tools.h	2013-08-11 18:40:46.000000000 +0100
+++ llvm-3.3.src/tools/clang/lib/Driver/Tools.h	2013-08-11 21:00:17.000000000 +0100
@@ -486,6 +486,39 @@
   };
 } // end namespace minix
 
+  /// pulsar -- Directly call GNU Binutils assembler and linker
+namespace pulsar {
+  class LLVM_LIBRARY_VISIBILITY Assemble : public Tool  {
+
+  public:
+    Assemble(const ToolChain &TC)
+      : Tool("pulsar::Assemble", "assembler", TC) {}
+
+    virtual bool hasIntegratedCPP() const { return false; }
+
+    virtual void ConstructJob(Compilation &C, const JobAction &JA,
+                              const InputInfo &Output,
+                              const InputInfoList &Inputs,
+                              const ArgList &TCArgs,
+                              const char *LinkingOutput) const;
+  };
+  class LLVM_LIBRARY_VISIBILITY Link : public Tool  {
+
+  public:
+    Link(const ToolChain &TC)
+      : Tool("pulsar::Link", "linker", TC) {}
+
+    virtual bool hasIntegratedCPP() const { return false; }
+    virtual bool isLinkJob() const { return true; }
+
+    virtual void ConstructJob(Compilation &C, const JobAction &JA,
+                              const InputInfo &Output,
+                              const InputInfoList &Inputs,
+                              const ArgList &TCArgs,
+                              const char *LinkingOutput) const;
+  };
+} // end namespace pulsar
+
   /// solaris -- Directly call Solaris assembler and linker
 namespace solaris {
   class LLVM_LIBRARY_VISIBILITY Assemble : public Tool  {
